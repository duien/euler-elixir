# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.

defmodule Euler do
  def fib(max, penult // 1, last // 2, fibs // [])

  def fib(max, penult, last, fibs)
      when penult + last > max do
    fibs ++ [penult, last]
  end

  def fib(max, penult, last, fibs) do
    fib(max, last, penult + last, fibs ++ [penult])
  end

  # /// 

  def sum_even_fibs(max) do
    Enum.reduce( fib(max), 0, fn
      (x, acc) when rem(x, 2) == 0 -> x + acc
      (_, acc) -> acc
      end )
  end
end
